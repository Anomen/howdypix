/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PhotosFilterBy: { // input type
    make?: Array<string | null> | null; // [String]
    model?: Array<string | null> | null; // [String]
  }
}

export interface NexusGenEnums {
  AuthEmailMessage: "AUTH_EMAIL_ERR" | "AUTH_EMAIL_ERR_NOT_EXIST" | "AUTH_EMAIL_OK"
  PhotosOrderBy: "DATE_ASC" | "DATE_DESC" | "NAME_ASC" | "NAME_DESC"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Album: { // root type
    dir: string; // String!
    name: string; // String!
    nbAlbums: number; // Int!
    nbPhotos: number; // Int!
    preview?: string | null; // String
    source: string; // String!
  }
  AuthEmailType: { // root type
    code?: string | null; // String
    messageData?: string | null; // String
    messageId: NexusGenEnums['AuthEmailMessage']; // AuthEmailMessage!
  }
  CurrentUserType: { // root type
    email: string; // String!
    name: string; // String!
  }
  DateTaken: { // root type
    from?: number | null; // Float
    to?: number | null; // Float
  }
  GetAlbumPhotos: { // root type
    album?: NexusGenRootTypes['Album'] | null; // Album
    albums: NexusGenRootTypes['Album'][]; // [Album!]!
    photos: Array<NexusGenRootTypes['Photo'] | null>; // [Photo]!
  }
  GetFilters: { // root type
    cameraMakes: string[]; // [String!]!
    cameraModels: string[]; // [String!]!
    dateTakenRange: NexusGenRootTypes['DateTaken']; // DateTaken!
  }
  GetSearchPhotos: { // root type
    photos: Array<NexusGenRootTypes['SearchPhoto'] | null>; // [SearchPhoto]!
  }
  GetTree: { // root type
    albums: NexusGenRootTypes['GetTreeAlbums'][]; // [GetTreeAlbums!]!
    sources: NexusGenRootTypes['GetTreeSources'][]; // [GetTreeSources!]!
  }
  GetTreeAlbums: { // root type
    dir: string; // String!
    nbAlbums: number; // Int!
    nbImages: number; // Int!
    parentDir?: string | null; // String
    preview?: string | null; // String
    source: string; // String!
  }
  GetTreeSources: { // root type
    name: string; // String!
    nbAlbums: number; // Int!
    nbImages: number; // Int!
    preview?: string | null; // String
  }
  Mutation: {};
  Photo: { // root type
    birthtime: number; // Float!
    file: string; // ID!
    id: string; // ID!
    thumbnails: Array<string | null>; // [String]!
  }
  PhotoDetail: { // root type
    aperture: number; // Float!
    birthtime: number; // Float!
    files: Array<string | null>; // [String]!
    id: string; // ID!
    iso: number; // Float!
    make: string; // String!
    model: string; // String!
    next?: string | null; // String
    photoStream: NexusGenRootTypes['PhotoStreamThumbnail'][]; // [PhotoStreamThumbnail!]!
    previous?: string | null; // String
    shutter: number; // Float!
  }
  PhotoStreamThumbnail: { // root type
    file: string; // ID!
    id: string; // ID!
    thumbnails: string[]; // [String!]!
  }
  Query: {};
  SearchAlbum: { // root type
    dir: string; // String!
    name: string; // String!
    nbAlbums: number; // Int!
    nbPhotos: number; // Int!
    preview?: string | null; // String
    source: string; // String!
  }
  SearchPhoto: { // root type
    birthtime: number; // Float!
    file: string; // String!
    id: string; // ID!
    thumbnails: Array<string | null>; // [String]!
  }
  Source: { // root type
    name: string; // String!
    nbAlbums: number; // Int!
    nbPhotos: number; // Int!
    preview?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Album: { // field return type
    dir: string; // String!
    name: string; // String!
    nbAlbums: number; // Int!
    nbPhotos: number; // Int!
    preview: string | null; // String
    source: string; // String!
  }
  AuthEmailType: { // field return type
    code: string | null; // String
    messageData: string | null; // String
    messageId: NexusGenEnums['AuthEmailMessage']; // AuthEmailMessage!
  }
  CurrentUserType: { // field return type
    email: string; // String!
    name: string; // String!
  }
  DateTaken: { // field return type
    from: number | null; // Float
    to: number | null; // Float
  }
  GetAlbumPhotos: { // field return type
    album: NexusGenRootTypes['Album'] | null; // Album
    albums: NexusGenRootTypes['Album'][]; // [Album!]!
    photos: Array<NexusGenRootTypes['Photo'] | null>; // [Photo]!
  }
  GetFilters: { // field return type
    cameraMakes: string[]; // [String!]!
    cameraModels: string[]; // [String!]!
    dateTakenRange: NexusGenRootTypes['DateTaken']; // DateTaken!
  }
  GetSearchPhotos: { // field return type
    photos: Array<NexusGenRootTypes['SearchPhoto'] | null>; // [SearchPhoto]!
  }
  GetTree: { // field return type
    albums: NexusGenRootTypes['GetTreeAlbums'][]; // [GetTreeAlbums!]!
    sources: NexusGenRootTypes['GetTreeSources'][]; // [GetTreeSources!]!
  }
  GetTreeAlbums: { // field return type
    dir: string; // String!
    nbAlbums: number; // Int!
    nbImages: number; // Int!
    parentDir: string | null; // String
    preview: string | null; // String
    source: string; // String!
  }
  GetTreeSources: { // field return type
    name: string; // String!
    nbAlbums: number; // Int!
    nbImages: number; // Int!
    preview: string | null; // String
  }
  Mutation: { // field return type
    authEmail: NexusGenRootTypes['AuthEmailType']; // AuthEmailType!
  }
  Photo: { // field return type
    birthtime: number; // Float!
    file: string; // ID!
    id: string; // ID!
    thumbnails: Array<string | null>; // [String]!
  }
  PhotoDetail: { // field return type
    aperture: number; // Float!
    birthtime: number; // Float!
    files: Array<string | null>; // [String]!
    id: string; // ID!
    iso: number; // Float!
    make: string; // String!
    model: string; // String!
    next: string | null; // String
    photoStream: NexusGenRootTypes['PhotoStreamThumbnail'][]; // [PhotoStreamThumbnail!]!
    previous: string | null; // String
    shutter: number; // Float!
  }
  PhotoStreamThumbnail: { // field return type
    file: string; // ID!
    id: string; // ID!
    thumbnails: string[]; // [String!]!
  }
  Query: { // field return type
    getAlbum: NexusGenRootTypes['GetAlbumPhotos']; // GetAlbumPhotos!
    getCurrentUser: NexusGenRootTypes['CurrentUserType'] | null; // CurrentUserType
    getFilters: NexusGenRootTypes['GetFilters']; // GetFilters!
    getPhoto: NexusGenRootTypes['PhotoDetail'] | null; // PhotoDetail
    getSearch: NexusGenRootTypes['GetSearchPhotos']; // GetSearchPhotos!
    getSources: Array<NexusGenRootTypes['Source'] | null>; // [Source]!
    getTree: NexusGenRootTypes['GetTree']; // GetTree!
  }
  SearchAlbum: { // field return type
    dir: string; // String!
    name: string; // String!
    nbAlbums: number; // Int!
    nbPhotos: number; // Int!
    preview: string | null; // String
    source: string; // String!
  }
  SearchPhoto: { // field return type
    birthtime: number; // Float!
    file: string; // String!
    id: string; // ID!
    thumbnails: Array<string | null>; // [String]!
  }
  Source: { // field return type
    name: string; // String!
    nbAlbums: number; // Int!
    nbPhotos: number; // Int!
    preview: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Album: { // field return type name
    dir: 'String'
    name: 'String'
    nbAlbums: 'Int'
    nbPhotos: 'Int'
    preview: 'String'
    source: 'String'
  }
  AuthEmailType: { // field return type name
    code: 'String'
    messageData: 'String'
    messageId: 'AuthEmailMessage'
  }
  CurrentUserType: { // field return type name
    email: 'String'
    name: 'String'
  }
  DateTaken: { // field return type name
    from: 'Float'
    to: 'Float'
  }
  GetAlbumPhotos: { // field return type name
    album: 'Album'
    albums: 'Album'
    photos: 'Photo'
  }
  GetFilters: { // field return type name
    cameraMakes: 'String'
    cameraModels: 'String'
    dateTakenRange: 'DateTaken'
  }
  GetSearchPhotos: { // field return type name
    photos: 'SearchPhoto'
  }
  GetTree: { // field return type name
    albums: 'GetTreeAlbums'
    sources: 'GetTreeSources'
  }
  GetTreeAlbums: { // field return type name
    dir: 'String'
    nbAlbums: 'Int'
    nbImages: 'Int'
    parentDir: 'String'
    preview: 'String'
    source: 'String'
  }
  GetTreeSources: { // field return type name
    name: 'String'
    nbAlbums: 'Int'
    nbImages: 'Int'
    preview: 'String'
  }
  Mutation: { // field return type name
    authEmail: 'AuthEmailType'
  }
  Photo: { // field return type name
    birthtime: 'Float'
    file: 'ID'
    id: 'ID'
    thumbnails: 'String'
  }
  PhotoDetail: { // field return type name
    aperture: 'Float'
    birthtime: 'Float'
    files: 'String'
    id: 'ID'
    iso: 'Float'
    make: 'String'
    model: 'String'
    next: 'String'
    photoStream: 'PhotoStreamThumbnail'
    previous: 'String'
    shutter: 'Float'
  }
  PhotoStreamThumbnail: { // field return type name
    file: 'ID'
    id: 'ID'
    thumbnails: 'String'
  }
  Query: { // field return type name
    getAlbum: 'GetAlbumPhotos'
    getCurrentUser: 'CurrentUserType'
    getFilters: 'GetFilters'
    getPhoto: 'PhotoDetail'
    getSearch: 'GetSearchPhotos'
    getSources: 'Source'
    getTree: 'GetTree'
  }
  SearchAlbum: { // field return type name
    dir: 'String'
    name: 'String'
    nbAlbums: 'Int'
    nbPhotos: 'Int'
    preview: 'String'
    source: 'String'
  }
  SearchPhoto: { // field return type name
    birthtime: 'Float'
    file: 'String'
    id: 'ID'
    thumbnails: 'String'
  }
  Source: { // field return type name
    name: 'String'
    nbAlbums: 'Int'
    nbPhotos: 'Int'
    preview: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    authEmail: { // args
      email?: string | null; // String
    }
  }
  Query: {
    getAlbum: { // args
      album?: string | null; // String
      source: string; // String!
    }
    getFilters: { // args
      album?: string | null; // String
      filterBy?: NexusGenInputs['PhotosFilterBy'] | null; // PhotosFilterBy
      source: string; // String!
    }
    getPhoto: { // args
      album: string; // String!
      file: string; // String!
      filterBy?: NexusGenInputs['PhotosFilterBy'] | null; // PhotosFilterBy
      orderBy: NexusGenEnums['PhotosOrderBy'] | null; // PhotosOrderBy
      source: string; // String!
    }
    getSearch: { // args
      album?: string | null; // String
      filterBy?: NexusGenInputs['PhotosFilterBy'] | null; // PhotosFilterBy
      orderBy: NexusGenEnums['PhotosOrderBy'] | null; // PhotosOrderBy
      source?: string | null; // String
    }
    getTree: { // args
      album: string; // String!
      source: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}